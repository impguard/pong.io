#!/bin/bash


function __find_versions ()
{
  (grep -E "v_\\.*" | sort -t. -n -k1,1 -k2,2 -k3,3 -k4,4) || echo
}


function version.exists ()
{
  local existing_version
  existing_version=$(git tag -l --contains HEAD | __find_versions | tail -1 | cut -d _ -f 2)
  test -n "$existing_version"
}


function version.latest ()
{
  local prev_version

  prev_version=$(git tag | __find_versions | tail -1 | cut -d _ -f 2)

  echo "$prev_version"
}


function version.next ()
{
  local existing_version

  existing_version=$(git tag -l --contains HEAD | __find_versions | tail -1 | cut -d _ -f 2)

  if [ -n "$existing_version" ]; then
    echo "$existing_version"
    return 0
  fi

  local prev_versions prev_version prev_major_minor_version prev_patch_version
  local patch_version

  prev_versions=$(git tag | grep -E "v_\\.*" | sort -t. -n -k1,1 -k2,2 -k3,3 -k4,4 | cut -d _ -f 2)

  if [ -z "$prev_versions" ]; then
    prev_version=0.0.0
  else
    prev_version=$(echo "$prev_versions" | tail -n 1)
  fi

  prev_major_minor_version=$(echo "$prev_version" | cut -d . -f 1,2)
  prev_patch_version=$(echo "$prev_version" | cut -d . -f 3)

  patch_version=$((prev_patch_version + 1))

  echo "$prev_major_minor_version.$patch_version"
}


function version.json
{
  local version tier
  local git_url git_sha git_message escaped_git_message
  local build_timestamp build_host build_user

  tier=$1
  version=$2

  git_url="$(git config --get remote.origin.url || echo none)"
  git_sha="$(git rev-parse HEAD || echo none)"
  git_message="$(git log -1 --pretty=%B || echo none)"
  escaped_git_message="$(echo "$git_message" | perl -pe 's/[^a-zA-Z0-9\#\.\-_ \t\@\\r\\n]/ /g')"

  build_timestamp="$(date -u +"%Y%m%dT%H%M%SZ")"
  build_host="${BUILD_HOST:-$(hostname)}"
  build_user="${USER:-robot}"

  cat > version.json <<END
{
  "version": "$version",
  "tier": "$tier",
  "git-url": "$git_url",
  "git-sha": "$git_sha",
  "git-message": "$escaped_git_message",
  "build-host": "$build_host",
  "build-timestamp": "$build_timestamp",
  "build-user": "$build_user"
}
END

  bake_echo_green "Created version.json:"
  bake_echo_yellow "$(sed -e '2,$s/^/  /' <(cat version.json))"
}


bake_task build "Builds the game for a specific tier."
function build {
  if [ "$#" -lt 1 ]; then
    bake_echo_red "usage: bake build dev|prod [version]"
    exit 1
  fi

  local tier version node_env

  tier=$1
  version=${2-latest}

  version.json "$tier" "$version"

  if [ "$tier" == "dev" ]; then
    node_env='development'
  else
    node_env='production'
  fi

  docker build \
    --build-arg NODE_ENV="$node_env" \
    -f 'build/Dockerfile' \
    -t 'pong:latest' .
  bake_echo_green 'Built the server container!'

  docker run --rm \
    -v "$PWD/dist/client:/game/dist/client" \
    'pong:latest' yarn build:client
  bake_echo_green "Built client files!"
}


bake_task compose "Runs docker compose."
function compose {
  docker-compose -f 'build/docker-compose.live.yml' "$@"
}


bake_task exec "Runs a command in the game server container."
function exec {
  compose run server "$@"
}


bake_task yarn "Runs yarn in the game server container."
function yarn {
  compose run server yarn "$@"
}


bake_task run "Runs the game."
function run {
  docker-compose -f 'build/docker-compose.yml' up
}


bake_task run.live "Runs the game with live reloading."
function run.live {
  local id

  if [ ! -d node_modules ]; then
    bake_echo_yellow 'Caching node modules...'

    id=$(docker create --rm --name 'pong-cache' 'pong:latest' true)
    docker cp "$id:/game/node_modules" ./node_modules
    docker rm "$id" 1>/dev/null

    bake_echo_green "Cache completed. Run 'bake yarn' to update."
  fi

  docker network create pong 1>/dev/null 2>&1 || true 

  compose up
}

bake_task lint "Runs the linter"
# shellcheck disable=SC2120
function lint {
  bake_echo_yellow "Linting client..."
  yarn lint:client "$@"
  bake_echo_yellow "Linting server..."
  yarn lint:server "$@"
}


bake_task tag "Tags the current branch with the next version."
function tag ()
{
  if [ -n "$(git status -s)" ]; then
    bake_echo_red "You have uncommitted changes. Aborting the tag."
    return 1
  fi

  git fetch --tags

  local version
  version=$(version.next)

  if version.exists; then
    bake_echo_green "$version already exists. Skipping tag."
    return 0
  fi

  git tag -a "v_$version" -m "Version $version"
  git push --tags

  bake_echo_green "Successfully tagged $version"
}


bake_task push "Pushes a build of the specified tier up."
function push {
  if [ -n "$(git status -s)" ]; then
    bake_echo_red "You have uncommitted changes. Aborting the push."
    return 1
  fi

  if [ "$#" -lt 1 ]; then
    bake_echo_red "usage: bake push dev|prod"
    return 1
  fi

  # shellcheck disable=SC2119
  lint

  local tier version tag
  tier=$1
  version=$(version.next)
  tag=$version-$tier

  bake_echo_yellow "Building $tag"
  build "$tier" "$version"

  bake_echo_yellow "Pushing client files to s3"
  aws s3 sync "./dist/client/" "s3://pong-client-builds/$tier/$version" --delete

  bake_echo_yellow "Pushing server image to ecr"
  local image_id="344778228378.dkr.ecr.us-west-2.amazonaws.com/pong:$tag"
  docker tag pong:latest "$image_id"
  docker push "$image_id"
}


bake_task deploy "Deploys a build to an environment."
function deploy {
  if [ "$#" -lt 1 ]; then
    bake_echo_red "usage: bake deploy ENV [VERSION] [TIER]"
    return 1
  fi

  local tier version env tag

  env=$1
  version=${2:-$(version.next)}
  tier=${3:-dev}
  tag=$version-$tier

  local builds_bucket deploy_bucket image_id

  builds_bucket="s3://pong-client-builds/$tier/$version"
  deploy_bucket="s3://pong-$env-site"
  image_id="344778228378.dkr.ecr.us-west-2.amazonaws.com/pong:$tag"

  if ! aws s3 ls "$builds_bucket" >/dev/null; then
    bake_echo_red "$builds_bucket does not exist in S3"
    exit 1
  fi

  if ! aws ecr list-images --registry-id 344778228378 --repository-name pong | grep "$tag" >/dev/null; then
    bake_echo_red "$image_id does not exist in ECR"
    exit 1
  fi

  bake_echo_yellow "Deploying $tag build to client $env"
  aws s3 sync "$builds_bucket" "$deploy_bucket" --delete

  bake_echo_yellow "Deploying $tag build to server $env"

  local taskdef task
  taskdef=$(jq ". | .containerDefinitions[0].image = \"$image_id\" | ." deploy/task-definition.json)
  task=$(aws ecs register-task-definition --family "pong-$env-server" --cli-input-json "$taskdef")

  echo "$task" | jq -r '.taskDefinition.taskDefinitionArn'
}


bake_task server.start "Starts a game server."
function server.start {
  if [ "$#" -lt 1 ]; then
    bake_echo_red "usage: bake server.start TASKDEFARN"
    return 1
  fi

  local taskdefarn taskrun

  taskdefarn=$1
  taskrun=$(jq ". | .taskDefinition = \"$taskdefarn\" | ." deploy/task-run.json)

  aws ecs run-task --cli-input-json "$taskrun" \
    | jq -r ".tasks[].taskArn"
}


bake_task server.definitions "Lists the task definitions that can be used to start a server"
function server.definitions {
  aws ecs list-task-definitions --family-prefix pong-dev-server \
    | jq -r '.taskDefinitionArns[]' \
    | tail -10
}


bake_task server.definition "Describe a specific task definition"
function server.definition {
  if [ "$#" -lt 1 ]; then
    bake_echo_red "usage: bake server.definition TASKDEF"
    return 1
  fi

  aws ecs describe-task-definition --task-definition "$1" \
    | jq '.taskDefinition.containerDefinitions[0]' \
    | jq -r '.image'
}


bake_task server.stop "Stops a game server."
function server.stop {
  if [ "$#" -lt 1 ]; then
    bake_echo_red "usage: bake server.stop TASKARN"
    return 1
  fi

  aws ecs stop-task --cluster "pong-sandbox" --task "$1" >/dev/null
  bake_echo_green "Server stopped!"
}


bake_task server.ls "Lists all running game servers."
function server.ls {
  local arns
  arns=$(aws ecs list-tasks --cluster "pong-sandbox" | jq -r '.taskArns | join(" ")')

  for arn in $arns; do
    server.info "$arn"
  done
}


bake_task server.info "Shows the information for a game server task."
function server.info {
  if [ "$#" -lt 1 ]; then
    bake_echo_red "usage: bake server.info TASKARN"
    return 1
  fi

  local description arn port ip status container_instance_arn instance_id

  description=$(aws ecs describe-tasks --cluster "pong-sandbox" --tasks "$1")
  arn=$(echo "$description" | jq -r '.tasks[0].taskArn')
  status=$(echo "$description" | jq -r '.tasks[0].lastStatus')
  port=$(echo "$description" | jq -r '.tasks[0].containers[0].networkBindings[0].hostPort')
  container_instance_arn=$(echo "$description" | jq -r '.tasks[0].containerInstanceArn')
  instance_id=$(aws ecs describe-container-instances \
    --cluster "pong-sandbox" \
    --container-instances \
    "$container_instance_arn" | jq -r '.containerInstances[0].ec2InstanceId')

  ip=$(aws ec2 describe-instances --instance-ids "$instance_id" \
    | jq -r '.Reservations[0].Instances[0].NetworkInterfaces[0].PrivateIpAddresses[0].Association.PublicIp')

  jq -n \
    --arg arn "$arn" \
    --arg status "$status" \
    --arg ip "$ip" \
    --arg port "$port" \
    '{ arn: $arn, status: $status, ip: $ip, port: $port }'
}
